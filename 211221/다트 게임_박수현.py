"""
https://programmers.co.kr/learn/courses/30/lessons/17682

정확성  테스트
테스트 1 〉	통과 (0.02ms, 10.2MB)
테스트 2 〉	통과 (0.02ms, 10.4MB)
테스트 3 〉	통과 (0.02ms, 10.2MB)
테스트 4 〉	통과 (0.01ms, 10.2MB)
테스트 5 〉	통과 (0.02ms, 10.3MB)
테스트 6 〉	통과 (0.03ms, 10.3MB)
테스트 7 〉	통과 (0.02ms, 10.5MB)
테스트 8 〉	통과 (0.03ms, 10.3MB)
테스트 9 〉	통과 (0.02ms, 10.5MB)
테스트 10 〉	통과 (0.02ms, 10.1MB)
테스트 11 〉	통과 (0.02ms, 10.3MB)
테스트 12 〉	통과 (0.02ms, 10.4MB)
테스트 13 〉	통과 (0.02ms, 10.3MB)
테스트 14 〉	통과 (0.02ms, 10.4MB)
테스트 15 〉	통과 (0.02ms, 10.4MB)
테스트 16 〉	통과 (0.02ms, 10.2MB)
테스트 17 〉	통과 (0.02ms, 10.3MB)
테스트 18 〉	통과 (0.03ms, 10.3MB)
테스트 19 〉	통과 (0.04ms, 10.5MB)
테스트 20 〉	통과 (0.02ms, 10.1MB)
테스트 21 〉	통과 (0.03ms, 10.4MB)
테스트 22 〉	통과 (0.02ms, 10.4MB)
테스트 23 〉	통과 (0.02ms, 10.3MB)
테스트 24 〉	통과 (0.02ms, 10.1MB)
테스트 25 〉	통과 (0.02ms, 10.4MB)
테스트 26 〉	통과 (0.02ms, 10.4MB)
테스트 27 〉	통과 (0.02ms, 10.2MB)
테스트 28 〉	통과 (0.02ms, 10.3MB)
테스트 29 〉	통과 (0.02ms, 10.5MB)
테스트 30 〉	통과 (0.02ms, 10.4MB)
테스트 31 〉	통과 (0.02ms, 10.1MB)
테스트 32 〉	통과 (0.02ms, 10.3MB)

조건
- 다트를 3번 던졌을 때 총점을 구하라
1. 0 <= 점수 <= 10
2. S, D, T: 점수에서 1제곱, 2제곱, 3제곱
3. *: 해당 점수 * 2 + 직전 점수 * 2
3-1. 첫 번째인 경우 해당 점수만 * 2
3-2. 다른 *와 중첩 가능 -> 4배
4. #: 해당 점수 * (-1)
4-1 *와 중첩된 경우 * (-2)
5. S,D,T는 점수마다 하나씩 존재 / * #는 둘 중 하나만, 존재 안할 수도

알고리즘
1. 10은 두 자리 수라 한 번에 처리 불가 -> 'K'로 치환
2. if문 줄이기 위해 s,d,t를 딕셔너리로 저장
3. 각 stage에 *# 개수가 일정하지 않아서 따로 관리 필요. stage 변수 생성
(숫자 저장 후에 stage + 1)
4. 조건에 따라 score 값 갱신, 숫자인 경우 stage 1 증가
"""
def solution(dartResult):
    score = []
    # 1
    dartResult = dartResult.replace('10', 'K')
    # 2
    sdt = {'S': 1, 'D': 2, 'T': 3}
    # 3
    stage = -1
    # 4
    for s in dartResult:
        if s in sdt:
            score[stage] **= sdt[s]
        elif s == '*':
            score[stage] *= 2
            if stage != 0:
                score[stage - 1] *= 2
            
        elif s == '#':
            score[stage] *= -1
        
        # 숫자인 경우
        else:
            s = 10 if s == 'K' else int(s)
            score.append(s)
            stage += 1
            
    return sum(score)
            